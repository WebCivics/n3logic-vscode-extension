export const builtinDocs: Record<string, string> = {
  'math:greaterThan': 'math:greaterThan(x, y) is true if x > y',
  'math:lessThan': 'math:lessThan(x, y) is true if x < y',
  'math:equalTo': 'math:equalTo(x, y) is true if x == y',
  'math:notEqualTo': 'math:notEqualTo(x, y) is true if x != y',
  'math:sum': 'math:sum(x, y) returns x + y',
  'math:difference': 'math:difference(x, y) returns x - y',
  'math:product': 'math:product(x, y) returns x * y',
  'math:quotient': 'math:quotient(x, y) returns x / y',
  'string:concatenation': 'string:concatenation(x, y) returns x + y',
  'string:contains': 'string:contains(x, y) is true if x contains y',
  'string:startsWith': 'string:startsWith(x, y) is true if x starts with y',
  'string:endsWith': 'string:endsWith(x, y) is true if x ends with y',
  'string:substring': 'string:substring(s, start, len) returns substring',
  'string:replace': 'string:replace(s, search, replace) returns s with search replaced by replace',
  'string:matches': 'string:matches(s, pattern) is true if s matches regex pattern',
  'string:length': 'string:length(s) returns the length of s',
  'string:toLowerCase': 'string:toLowerCase(s) returns s in lower case',
  'string:toUpperCase': 'string:toUpperCase(s) returns s in upper case',
  'string:trim': 'string:trim(s) returns s with whitespace trimmed',
  'log:implies': 'log:implies(x, y) is true if x implies y (handled by rule engine)',
  'log:equalTo': 'log:equalTo(x, y) is true if x === y',
  'log:not': 'log:not(x) is true if x is false',
  'list:length': 'list:length(list, n) is true if list has length n',
  'list:contains': 'list:contains(list, x) is true if list contains x',
  'list:first': 'list:first(list, x) is true if x is the first element',
  'list:rest': 'list:rest(list, rest) returns the rest of the list after the first element',
  'list:append': 'list:append(list, x) returns a new list with x appended',
  'list:remove': 'list:remove(list, x) returns a new list with x removed',
  'list:reverse': 'list:reverse(list) returns a new list with elements reversed',
  'time:now': 'time:now(x) is true if x is the current ISO date string',
  'time:before': 'time:before(a, b) is true if a < b (date)',
  'time:after': 'time:after(a, b) is true if a > b (date)',
  'time:duration': 'time:duration(a, b, d) is true if d is the difference in ms between a and b',
  'time:hour': 'time:hour(date, h) is true if date has hour h',
  'time:minute': 'time:minute(date, m) is true if date has minute m',
  'time:second': 'time:second(date, s) is true if date has second s',
  'time:year': 'time:year(date, y) is true if date has year y',
  'time:month': 'time:month(date, m) is true if date has month m (1-12)',
  'time:day': 'time:day(date, d) is true if date has day d',
  'type:isLiteral': 'type:isLiteral(x) is true if x is a literal',
  'type:isIRI': 'type:isIRI(x) is true if x is an IRI',
  'type:isBlank': 'type:isBlank(x) is true if x is a blank node',
  'type:toString': 'type:toString(x) returns x as string',
  'type:toNumber': 'type:toNumber(x) returns x as number literal',
  'type:toBoolean': 'type:toBoolean(x) returns x as boolean literal'
};
// Shared signatures and docs for N3Logic providers

export const builtinSignatures: Record<string, { label: string, parameters: string[] }> = {
  'math:greaterThan': { label: 'math:greaterThan(x, y)', parameters: ['x: number', 'y: number'] },
  'math:lessThan': { label: 'math:lessThan(x, y)', parameters: ['x: number', 'y: number'] },
  'math:equalTo': { label: 'math:equalTo(x, y)', parameters: ['x: number', 'y: number'] },
  'math:notEqualTo': { label: 'math:notEqualTo(x, y)', parameters: ['x: number', 'y: number'] },
  'math:sum': { label: 'math:sum(x, y)', parameters: ['x: number', 'y: number'] },
  'math:difference': { label: 'math:difference(x, y)', parameters: ['x: number', 'y: number'] },
  'math:product': { label: 'math:product(x, y)', parameters: ['x: number', 'y: number'] },
  'math:quotient': { label: 'math:quotient(x, y)', parameters: ['x: number', 'y: number'] },
  'string:concatenation': { label: 'string:concatenation(x, y)', parameters: ['x: string', 'y: string'] },
  'string:contains': { label: 'string:contains(x, y)', parameters: ['x: string', 'y: string'] },
  'string:startsWith': { label: 'string:startsWith(x, y)', parameters: ['x: string', 'y: string'] },
  'string:endsWith': { label: 'string:endsWith(x, y)', parameters: ['x: string', 'y: string'] },
  'string:substring': { label: 'string:substring(s, start, len)', parameters: ['s: string', 'start: number', 'len: number'] },
  'string:replace': { label: 'string:replace(s, search, replace)', parameters: ['s: string', 'search: string', 'replace: string'] },
  'string:matches': { label: 'string:matches(s, pattern)', parameters: ['s: string', 'pattern: regex'] },
  'string:length': { label: 'string:length(s)', parameters: ['s: string'] },
  'string:toLowerCase': { label: 'string:toLowerCase(s)', parameters: ['s: string'] },
  'string:toUpperCase': { label: 'string:toUpperCase(s)', parameters: ['s: string'] },
  'string:trim': { label: 'string:trim(s)', parameters: ['s: string'] },
  'log:implies': { label: 'log:implies(x, y)', parameters: ['x: formula', 'y: formula'] },
  'log:equalTo': { label: 'log:equalTo(x, y)', parameters: ['x: any', 'y: any'] },
  'log:not': { label: 'log:not(x)', parameters: ['x: formula'] },
  'list:length': { label: 'list:length(list, n)', parameters: ['list: List', 'n: number'] },
  'list:contains': { label: 'list:contains(list, x)', parameters: ['list: List', 'x: any'] },
  'list:first': { label: 'list:first(list, x)', parameters: ['list: List', 'x: any'] },
  'list:rest': { label: 'list:rest(list, rest)', parameters: ['list: List', 'rest: List'] },
  'list:append': { label: 'list:append(list, x)', parameters: ['list: List', 'x: any'] },
  'list:remove': { label: 'list:remove(list, x)', parameters: ['list: List', 'x: any'] },
  'list:reverse': { label: 'list:reverse(list)', parameters: ['list: List'] },
  'time:now': { label: 'time:now(x)', parameters: ['x: dateTime'] },
  'time:before': { label: 'time:before(a, b)', parameters: ['a: dateTime', 'b: dateTime'] },
  'time:after': { label: 'time:after(a, b)', parameters: ['a: dateTime', 'b: dateTime'] },
  'time:duration': { label: 'time:duration(a, b, d)', parameters: ['a: dateTime', 'b: dateTime', 'd: number'] },
  'time:hour': { label: 'time:hour(date, h)', parameters: ['date: dateTime', 'h: number'] },
  'time:minute': { label: 'time:minute(date, m)', parameters: ['date: dateTime', 'm: number'] },
  'time:second': { label: 'time:second(date, s)', parameters: ['date: dateTime', 's: number'] },
  'time:year': { label: 'time:year(date, y)', parameters: ['date: dateTime', 'y: number'] },
  'time:month': { label: 'time:month(date, m)', parameters: ['date: dateTime', 'm: number'] },
  'time:day': { label: 'time:day(date, d)', parameters: ['date: dateTime', 'd: number'] },
  'type:isLiteral': { label: 'type:isLiteral(x)', parameters: ['x: any'] },
  'type:isIRI': { label: 'type:isIRI(x)', parameters: ['x: any'] },
  'type:isBlank': { label: 'type:isBlank(x)', parameters: ['x: any'] },
  'type:toString': { label: 'type:toString(x)', parameters: ['x: any'] },
  'type:toNumber': { label: 'type:toNumber(x)', parameters: ['x: any'] },
  'type:toBoolean': { label: 'type:toBoolean(x)', parameters: ['x: any'] }
};
